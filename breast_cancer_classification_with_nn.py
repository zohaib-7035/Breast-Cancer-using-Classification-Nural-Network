# -*- coding: utf-8 -*-
"""Breast Cancer Classification with NN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l2FW0t90GIqExB1rPqxkThVTVv4akUVG
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import sklearn.datasets

_data= sklearn.datasets.load_breast_cancer()

_data

data=pd.DataFrame(_data.data,columns=_data.feature_names)

data

data['label']=_data.target

data.head()

data.tail()

data.shape

data.info()

data.describe()

data.isnull().sum()

data.count()

data['label'].value_counts()

data.groupby('label').mean()

X=data.drop(columns='label',axis=1)
Y=data['label']

print(X)

print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X_train.shape, X_test.shape, X.shape)

from sklearn.preprocessing import StandardScaler

scaler=StandardScaler()

X_train_std = scaler.fit_transform(X_train)

X_test_std = scaler.transform(X_test)

# importing tensorflow and Keras
import tensorflow as tf
tf.random.set_seed(6)
from tensorflow import keras

# setting up the layers of Neural Network

model = keras.Sequential([
                          keras.layers.Flatten(input_shape=(30,)),
                          keras.layers.Dense(20, activation='relu'),
                          keras.layers.Dense(2, activation='sigmoid')
])

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

# training the Meural Network


history = model.fit(X_train_std, Y_train, validation_split=0.1, epochs=10)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')

plt.legend(['training data', 'validation data'], loc = 'lower right')

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])

plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')

plt.legend(['training data', 'validation data'], loc = 'upper right')

loss,accuracy=model.evaluate(X_test_std,Y_test)

print("The accuracy is ",accuracy)

print(X_test_std.shape)

print(X_test_std[0])

Y_pred=model.predict(X_test_std)

print(Y_pred.shape)

print(Y_pred[0])

print(X_test_std)

print(Y_pred)

#  argmax function

my_list = [0.25, 0.56]

index_of_max_value = np.argmax(my_list)
print(my_list)
print(index_of_max_value)

Y_pred_labels = [int(np.argmax(i)) for i in Y_pred]
print(Y_pred_labels)

input_data = (11.76,21.6,74.72,427.9,0.08637,0.04966,0.01657,0.01115,0.1495,0.05888,0.4062,1.21,2.635,28.47,0.005857,0.009758,0.01168,0.007445,0.02406,0.001769,12.98,25.72,82.98,516.5,0.1085,0.08615,0.05523,0.03715,0.2433,0.06563)


input_np=np.asarray(input_data)
input_reshaped=np.reshape(input_np,(1,-1))

input_std=scaler.transform(input_reshaped)

prediction=model.predict(input_std)
print(prediction)
prediction_label = [int(np.argmax(prediction))]
print(prediction_label[0])

if(prediction_label[0] == 0):
  print('The tumor is Malignant')
else:
  print('The tumor is Benign')

